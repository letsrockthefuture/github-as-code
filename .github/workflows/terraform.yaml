name: Terraform

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/terraform.yaml"
      - "terraform/**"
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/terraform.yaml"
      - "terraform/**"

# defaults:
#   run:
#     working-directory: "terraform/"

jobs:
  tflint:
    name: TFLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up TFLint
        uses: terraform-linters/setup-tflint@v1
        with:
          tflint_version: v0.34.0

      - name: Run TFLint (Terraform linter)
        run: |
          make tflint

  checkov:
    name: Checkov
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: "Run Checkov (Terraform code security analysis)"
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: "terraform/"
          # check: CKV_AWS_1 # optional: run only a specific check_id. can be comma separated list
          # skip_check: CKV_AWS_2 # optional: skip a specific check_id. can be comma separated list
          skip_check: CKV_GIT_1 # optional: skip a specific check_id. can be comma separated list
          # quiet: true # optional: display only failed checks
          # soft_fail: true # optional: do not return an error code if there are failed checks
          framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
          # output_format: json # optional: the output format, one of: cli, json, junitxml, github_failed_only
          download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
          # log_level: DEBUG # optional: set log level. Default WARNING
          # config_file: path/this_file
          # baseline: cloudformation/.checkov.baseline # optional: Path to a generated baseline file. Will only report results not in the baseline.
          # container_user: 1000 # optional: Define what UID and / or what GID to run the container under to prevent permission issues

  plan:
    name: Plan
    runs-on: ubuntu-latest
    needs:
      - tflint
      - checkov
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up credentials
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.0
          cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}

      - name: Plan
        id: terraform_plan
        # if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          make plan

      - name: Plan status
        if: steps.terraform_plan.outcome == 'failure'
        run: |
          exit 1

      # - name: Update pull request
      #   uses: actions/github-script@0.9.0
      #   if: github.event_name == 'pull_request'
      #   env:
      #     TERRAFORM_PLAN: "terraform\n${{ steps.terraform_plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform format & style üñå: \`${{ steps.terraform_fmt.outcome }}\`
      #       #### Terraform initialization ‚öôÔ∏è: \`${{ steps.terraform_init.outcome }}\`
      #       #### Terraform validation ü§ñ: \${{ steps.terraform_validate.outputs.stdout }}\
      #       #### Terraform plan üìñ: \`${{ steps.terraform_plan.outcome }}\`

      #       <details><summary>Show plan</summary>

      #       \`\`\`\n
      #       ${process.env.TERRAFORM_PLAN}
      #       \`\`\`

      #       </details>

      #       *Actor: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;

      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

  apply:
    name: Apply
    runs-on: ubuntu-latest
    needs: plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        environment: [ development, production ]
    environment:
      name: ${{ matrix.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up credentials
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.0
          cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}

      - name: Apply
        run: |
          make apply
